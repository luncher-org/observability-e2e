name: K3S Installation, Rancher Setup, Chart Installation & E2E Tests

on:
  push:
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * *'  # Runs daily at 1:00 AM UTC (6:30 AM IST)

jobs:
  setup_rancher:
    name: Setup Rancher - Tag - ${{ matrix.rancher_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - k3s_version: v1.31.12+k3s1
            rancher_version: head/devel/2.11
          - k3s_version: v1.32.8+k3s1
            rancher_version: latest/devel/2.12
          - k3s_version: v1.32.8+k3s1
            rancher_version: latest/devel/head
      fail-fast: false

    steps:
      - name: Set environment variables
        run: |
          echo "HOSTNAME_NAME=localhost" >> $GITHUB_ENV
          echo "RANCHER_VERSION=${{ matrix.rancher_version }}" >> $GITHUB_ENV
          echo "K3S_VERSION=${{ matrix.k3s_version }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
      - name: Set up Permissions
        run: |
          sudo mkdir -p /etc/rancher/k3s
          sudo chown -R runner:runner /etc/rancher/k3s
          sudo mkdir -p $HOME/.kube
          sudo chown -R runner:runner $HOME/.kube

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: './go.mod'

      - name: Install K3S Version ${{ matrix.k3s_version }} & Rancher Version ${{ matrix.rancher_version }}
        id: install_k3s_and_rancher
        run: |
          set -e
          go test -timeout 30m -run ^TestE2E$ github.com/rancher/observability-e2e/installations/k3s -v -count=1 -ginkgo.v

      - name: Create artifacts directory
        run: mkdir -p ~/artifacts

      - name: Export CATTLE_TEST_CONFIG environment variable
        run: echo "CATTLE_TEST_CONFIG=$HOME/cattle-config.yaml" >> $GITHUB_ENV

      - name: Run Observability Charts Tests
        id: run_observability_tests
        run: |
          sleep 60
          set -e
          TEST_LABEL_FILTER=installation go test -timeout 20m github.com/rancher/observability-e2e/tests/e2e -v -count=1 -ginkgo.v | tee ~/artifacts/test-output-installation-${{ matrix.k3s_version }}.txt
          TEST_LABEL_FILTER=E2E go test -timeout 30m github.com/rancher/observability-e2e/tests/e2e -v -count=1 -ginkgo.v | tee ~/artifacts/test-output-e2e-${{ matrix.k3s_version }}.txt

      - name: Run Installation Charts Tests For Backup and Restore
        id: run_installation_tests_backup_restore
        run: |
          set -e
          mv ./tests/helper/yamls/inputBackupRestoreConfig.yaml.example ./tests/helper/yamls/inputBackupRestoreConfig.yaml
          TEST_LABEL_FILTER=installation go test -timeout 20m github.com/rancher/observability-e2e/tests/backuprestore/functional -v -count=1 -ginkgo.v | tee ~/artifacts/test-output-installation-${{ matrix.k3s_version }}.txt

      - name: Run Observability Upgrade tests
        id: run_observability_upgrade_tests
        run: |
          set -e
          TEST_LABEL_FILTER=beforeUpgrade go test -timeout 20m github.com/rancher/observability-e2e/tests/e2e -v -count=1 -ginkgo.v | tee ~/artifacts/test-output-upgrade-${{ matrix.k3s_version }}.txt
          TEST_LABEL_FILTER=E2E go test -timeout 30m github.com/rancher/observability-e2e/tests/e2e -v -count=1 -ginkgo.v | tee ~/artifacts/test-output-e2e-${{ matrix.k3s_version }}.txt
          TEST_LABEL_FILTER=afterUpgrade go test -timeout 20m github.com/rancher/observability-e2e/tests/e2e -v -count=1 -ginkgo.v | tee ~/artifacts/test-output-upgrade-${{ matrix.k3s_version }}.txt
          TEST_LABEL_FILTER=E2E go test -timeout 30m github.com/rancher/observability-e2e/tests/e2e -v -count=1 -ginkgo.v | tee ~/artifacts/test-output-e2e-${{ matrix.k3s_version }}.txt

      - name: Run Tests and Prepare Artifact Name
        run: |
          echo "ARTIFACT_NAME=test-artifacts-${{ matrix.k3s_version }}-$(echo '${{ matrix.rancher_version }}' | tr '/' '-')" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ~/artifacts

      - name: Cleanup all containers
        if: always()
        run: |
          echo "Cleaning up all containers..."
          docker ps -q | xargs -r docker rm -f

      - name: Check Test Results and Mark Pipeline
        if: always()
        run: |
          for log_file in ~/artifacts/*; do
            if [[ -f "$log_file" ]]; then
              if grep -q "FAIL!" "$log_file"; then
                echo "K3S_VERSION=${{ matrix.k3s_version }} RANCHER_VERSION=${{ matrix.rancher_version }} failure encounter in $(basename "$log_file") contains failures!"
                grep -A1 -B1 "FAIL!" "$log_file"
                exit 1
              else
                echo "K3S_VERSION=${{ matrix.k3s_version }} RANCHER_VERSION=${{ matrix.rancher_version }} test successfully passed with version and file details -> $(basename "$log_file")"
              fi
            fi
          done
